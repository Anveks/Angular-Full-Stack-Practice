{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/sylva/OneDrive/Documents/GitHub/Angular-Full-Stack-Practice-/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { appConfig } from '../utils/app-config';\nimport { firstValueFrom } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAllCategories() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const categoriesJson = localStorage.getItem('categories');\n      console.log(categoriesJson);\n      let categories;\n      if (categoriesJson) {\n        categories = JSON.parse(categoriesJson);\n      } else {\n        const observable = _this.http.get(appConfig.categoriesURL);\n        categories = yield firstValueFrom(observable);\n        localStorage.setItem('categories', JSON.stringify(categories));\n      }\n      return categories;\n    })();\n  }\n  getGamesByCategories(id) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this2.http.get(appConfig.gamesByCategoriesURL + id);\n      const games = yield firstValueFrom(observable);\n      return games;\n    })();\n  }\n  getGamesBySearch(searchWord) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this3.http.get(appConfig.searchURL + searchWord);\n      const games = yield firstValueFrom(observable);\n      return games;\n    })();\n  }\n  deleteGame(id) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this4.http.delete(appConfig.gamesURL + id);\n      yield firstValueFrom(observable);\n    })();\n  }\n  addGame(game) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this5.http.post(appConfig.gamesURL, game);\n      yield firstValueFrom(observable);\n    })();\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,cAAc,QAAQ,MAAM;;;AAOrC,OAAM,MAAOC,WAAW;EAEpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAE3BC,gBAAgB;IAAA;IAAA;MACzB,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MACzDC,OAAO,CAACC,GAAG,CAACJ,cAAc,CAAC;MAE3B,IAAIK,UAA2B;MAE/B,IAAIL,cAAc,EAAE;QAClBK,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACP,cAAc,CAAC;OACxC,MAAM;QACL,MAAMQ,UAAU,GAAG,KAAI,CAACV,IAAI,CAACW,GAAG,CAAkBf,SAAS,CAACgB,aAAa,CAAC;QAC1EL,UAAU,SAASV,cAAc,CAACa,UAAU,CAAC;QAC7CP,YAAY,CAACU,OAAO,CAAC,YAAY,EAAEL,IAAI,CAACM,SAAS,CAACP,UAAU,CAAC,CAAC;;MAGhE,OAAOA,UAAU;IAAC;EACpB;EAEWQ,oBAAoB,CAACC,EAAU;IAAA;IAAA;MACxC,MAAMN,UAAU,GAAG,MAAI,CAACV,IAAI,CAACW,GAAG,CAAcf,SAAS,CAACqB,oBAAoB,GAAGD,EAAE,CAAC;MAClF,MAAME,KAAK,SAASrB,cAAc,CAACa,UAAU,CAAC;MAC9C,OAAOQ,KAAK;IAAC;EACjB;EAEaC,gBAAgB,CAACC,UAAkB;IAAA;IAAA;MAC5C,MAAMV,UAAU,GAAG,MAAI,CAACV,IAAI,CAACW,GAAG,CAAcf,SAAS,CAACyB,SAAS,GAAGD,UAAU,CAAC;MAC/E,MAAMF,KAAK,SAASrB,cAAc,CAACa,UAAU,CAAC;MAC9C,OAAOQ,KAAK;IAAC;EACjB;EAEaI,UAAU,CAACN,EAAU;IAAA;IAAA;MAC9B,MAAMN,UAAU,GAAG,MAAI,CAACV,IAAI,CAACuB,MAAM,CAAY3B,SAAS,CAAC4B,QAAQ,GAAGR,EAAE,CAAC;MACvE,MAAMnB,cAAc,CAACa,UAAU,CAAC;IAAC;EACrC;EAEae,OAAO,CAACC,IAAe;IAAA;IAAA;MAChC,MAAMhB,UAAU,GAAG,MAAI,CAACV,IAAI,CAAC2B,IAAI,CAAY/B,SAAS,CAAC4B,QAAQ,EAAEE,IAAI,CAAC;MACtE,MAAM7B,cAAc,CAACa,UAAU,CAAC;IAAC;EACrC;;AAzCSZ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA8B,SAAX9B,WAAW;EAAA+B,YAFR;AAAM","names":["appConfig","firstValueFrom","DataService","constructor","http","getAllCategories","categoriesJson","localStorage","getItem","console","log","categories","JSON","parse","observable","get","categoriesURL","setItem","stringify","getGamesByCategories","id","gamesByCategoriesURL","games","getGamesBySearch","searchWord","searchURL","deleteGame","delete","gamesURL","addGame","game","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\sylva\\OneDrive\\Documents\\GitHub\\Angular-Full-Stack-Practice-\\Frontend\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { appConfig } from '../utils/app-config';\nimport { firstValueFrom } from \"rxjs\";\nimport CategoryModel from '../models/category-model';\nimport GameModel from '../models/game-model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService {\n\n    constructor(private http: HttpClient) { }\n\n    public async getAllCategories(): Promise<CategoryModel[]> {\n        const categoriesJson = localStorage.getItem('categories');\n        console.log(categoriesJson);\n        \n        let categories: CategoryModel[];\n      \n        if (categoriesJson) {\n          categories = JSON.parse(categoriesJson);\n        } else {\n          const observable = this.http.get<CategoryModel[]>(appConfig.categoriesURL);\n          categories = await firstValueFrom(observable);\n          localStorage.setItem('categories', JSON.stringify(categories));\n        }\n      \n        return categories;\n      }\n\n    public async getGamesByCategories(id: string): Promise<GameModel[]> {\n        const observable = this.http.get<GameModel[]>(appConfig.gamesByCategoriesURL + id);\n        const games = await firstValueFrom(observable);\n        return games;\n    }\n\n    public async getGamesBySearch(searchWord: string): Promise<GameModel[]> {\n        const observable = this.http.get<GameModel[]>(appConfig.searchURL + searchWord);\n        const games = await firstValueFrom(observable);\n        return games;\n    }\n\n    public async deleteGame(id: string): Promise<void> {\n        const observable = this.http.delete<GameModel>(appConfig.gamesURL + id);\n        await firstValueFrom(observable);\n    }\n\n    public async addGame(game: GameModel): Promise<void>{\n        const observable = this.http.post<GameModel>(appConfig.gamesURL, game);\n        await firstValueFrom(observable);\n    }\n\n    // public async getAll___(): Promise<MyModel[]> {\n    //     const observable = this.http.get<MyModel[]>(appConfig.dataUrl);\n    //     const data = await firstValueFrom(observable);\n    //     return data;\n    // }\n    \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}